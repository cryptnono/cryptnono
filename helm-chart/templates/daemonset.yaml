apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "cryptnono.fullname" . }}
  labels:
    {{- include "cryptnono.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "cryptnono.selectorLabels" . | nindent 6 }}

  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/config-flowkiller: {{ include (print $.Template.BasePath "/configmap-flowkiller.yaml") . | sha256sum }}
        {{- if and .Values.detectors.execwhacker.enabled (and .Values.detectors.execwhacker.metrics.enabled .Values.detectors.execwhacker.metrics.prometheusScrape) }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.detectors.execwhacker.metrics.port }}"
        prometheus.io/path: "/metrics"
        {{- end}}
        {{- with .Values.podAnnotations }}
        {{- . | toYaml | nindent 8 }}
        {{- end }}
      labels:
        {{- include "cryptnono.selectorLabels" . | nindent 10 }}
    spec:
      containers:
        {{- if .Values.detectors.execwhacker.enabled}}
        - args:
            - /scripts/execwhacker.py
            {{- if or .Values.detectors.execwhacker.containerdHostPath .Values.detectors.execwhacker.dockerHostPath }}
            - --lookup-container
            {{- end }}
            {{- range $key, $value := .Values.detectors.execwhacker.configs }}
            - --config
            - /config/execwhacker-{{ $key }}.json
            {{ end }}
            {{- if .Values.detectors.execwhacker.debug }}
            - --debug
            {{ end}}
            {{- if .Values.detectors.execwhacker.metrics.enabled }}
            - --serve-metrics-port={{ .Values.detectors.execwhacker.metrics.port }}
            {{ end}}
            - --threadpool-size={{ .Values.detectors.execwhacker.threadpoolSize }}
          {{- if or .Values.detectors.execwhacker.containerdHostPath .Values.detectors.execwhacker.dockerHostPath .Values.detectors.execwhacker.env }}
          env:
            {{- with .Values.detectors.execwhacker.containerdHostPath }}
            - name: CONTAINER_RUNTIME_ENDPOINT
              value: unix:///host{{ . }}
            {{- end }}
            {{- with .Values.detectors.execwhacker.dockerHostPath }}
            - name: DOCKER_HOST
              value: unix:///host{{ . }}
            {{- end }}
            {{- range $key, $value := .Values.detectors.execwhacker.env }}
            - name: {{ $key }}
              value: {{ $value }}
            {{- end }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- with .Values.image.pullPolicy }}
          imagePullPolicy: {{ . }}
          {{- end }}
          {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          name: execwhacker
          {{- if .Values.detectors.execwhacker.metrics.enabled }}
          ports:
            - containerPort: {{ .Values.detectors.execwhacker.metrics.port }}
              protocol: TCP
          {{ end}}
          {{- with .Values.detectors.execwhacker.resources }}
          resources:
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          stdin: true
          tty: true
          volumeMounts:
            - mountPath: /sys
              name: sys
              readOnly: true
            - mountPath: /config
              name: config
              readOnly: true
            - mountPath: /lib/modules
              name: modules-dir
              readOnly: true
            - mountPath: /usr/src/
              name: linux-headers-generated
              readOnly: true
            {{- if or .Values.detectors.execwhacker.containerdHostPath .Values.detectors.execwhacker.dockerHostPath }}
            - mountPath: /host
              name: host-rootfs
              readOnly: true
            {{- end }}
        {{ end }}
        {{- if .Values.detectors.monero.enabled }}
        - args:
            - /scripts/monero.py
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- with .Values.image.pullPolicy }}
          imagePullPolicy: {{ . }}
          {{- end }}
          {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          name: monero
          {{- with .Values.detectors.monero.resources }}
          resources:
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          stdin: true
          tty: true
          volumeMounts:
            - mountPath: /sys
              name: sys
              readOnly: true
            - mountPath: /lib/modules
              name: modules-dir
              readOnly: true
            - mountPath: /lib/modules.host
              name: modules-host
              readOnly: true
            - mountPath: /usr/src/
              name: linux-headers-generated
              readOnly: true
      {{- end }}
      {{- if and .Values.detectors.tcpflowkiller.enabled }}
        - args:
            - /scripts/flowkiller.py
            - --config=/config/flowkiller_config.json
          {{- if or .Values.detectors.tcpflowkiller.containerdHostPath .Values.detectors.tcpflowkiller.dockerHostPath .Values.detectors.tcpflowkiller.env }}
          env:
            {{- with .Values.detectors.tcpflowkiller.containerdHostPath }}
            - name: CONTAINER_RUNTIME_ENDPOINT
              value: unix:///host{{ . }}
            {{- end }}
            {{- with .Values.detectors.tcpflowkiller.dockerHostPath }}
            - name: DOCKER_HOST
              value: unix:///host{{ . }}
            {{- end }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- with .Values.image.pullPolicy }}
          imagePullPolicy: {{ . }}
          {{- end }}
          {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          name: flowkiller
          {{- if .Values.detectors.tcpflowkiller.metrics.enabled }}
          ports:
            - containerPort: {{ .Values.detectors.tcpflowkiller.metrics.port }}
              protocol: TCP
          {{ end}}
          {{- with .Values.detectors.tcpflowkiller.resources }}
          resources:
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          stdin: true
          tty: true
          volumeMounts:
            - mountPath: /sys
              name: sys
              readOnly: true
            - mountPath: /config
              name: config-flowkiller
              readOnly: true
            {{- range $key, $value := .Values.detectors.tcpflowkiller.bannedIpv4ConfigMaps }}
            - mountPath: /ban-config/{{ $value }}
              name: flowkiller-{{ $key }}
              readOnly: true
              subPath: {{ $value }}
            {{- end }}
            - mountPath: /lib/modules
              name: modules-dir
              readOnly: true
            - mountPath: /usr/src/
              name: linux-headers-generated
              readOnly: true
            {{- if or .Values.detectors.tcpflowkiller.containerdHostPath .Values.detectors.tcpflowkiller.dockerHostPath }}
            - mountPath: /host
              name: host-rootfs
              readOnly: true
            {{- end }}
      {{- end }}
      hostPID: true
      initContainers:
        # fetch linux kernel headers, needed for bcc to run properly
        - image: {{ .Values.fetchKernelHeaders.image.name }}:{{ .Values.fetchKernelHeaders.image.tag }}
          imagePullPolicy: IfNotPresent
          name: fetch-kernel-headers
          resources: {{ .Values.fetchKernelHeaders.resources | toJson }}
          volumeMounts:
            - mountPath: /etc/lsb-release.host
              name: lsb-release
              readOnly: true
            - mountPath: /etc/os-release.host
              name: os-release
              readOnly: true
            - mountPath: /lib/modules
              name: modules-dir
            - mountPath: /usr/src/
              name: linux-headers-generated
            - mountPath: /boot.host
              name: boot-host
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- . | toYaml | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- . | toYaml | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- . | toYaml | nindent 8 }}
      {{- end }}
      volumes:
        - configMap:
            defaultMode: 420
            name: {{ include "cryptnono.fullname" . }}
          name: config
        - configMap:
            defaultMode: 420
            name: {{ include "cryptnono.fullname" . }}-flowkiller
          name: config-flowkiller
        {{- range $key, $value := .Values.detectors.tcpflowkiller.bannedIpv4ConfigMaps }}
        - configMap:
            defaultMode: 420
            name: {{ $key }}
            items:
              - key: {{ $value }}
                path: {{ $value }}
          name: flowkiller-{{ $key }}
        {{- end }}
        - hostPath:
            path: /usr
          name: usr-host
        - hostPath:
            path: /lib/modules
          name: modules-host
        - hostPath:
            path: /sys
          name: sys
        - hostPath:
            path: /etc/lsb-release
          name: lsb-release
        - hostPath:
            path: /etc/os-release
          name: os-release
        - hostPath:
            path: /tmp/cryptnono/linux-headers/modules_dir
          name: modules-dir
        - hostPath:
            # Put this in /tmp on the host, so it is regenerated  on restart
            path: /tmp/cryptnono/linux-headers/generated
          name: linux-headers-generated
        - hostPath:
            path: /boot
          name: boot-host
        {{- if or .Values.detectors.execwhacker.containerdHostPath .Values.detectors.execwhacker.dockerHostPath .Values.detectors.tcpflowkiller.containerdHostPath .Values.detectors.tcpflowkiller.dockerHostPath }}
        - hostPath:
            path: /
            type: Directory
          name: host-rootfs
        {{- end }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}